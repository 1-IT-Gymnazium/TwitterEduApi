{
  "api/TwitterEdu.Api.Controllers.AuthController.html": {
    "href": "api/TwitterEdu.Api.Controllers.AuthController.html",
    "title": "Class AuthController | TwitterEduApi",
    "keywords": "Class AuthController Namespace TwitterEdu.Api.Controllers Assembly TwitterEdu.Api.dll [ApiController] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthController(IClock, UserManager<AppUser>, SignInManager<AppUser>) public AuthController(IClock clock, UserManager<AppUser> userManager, SignInManager<AppUser> signInManager) Parameters clock IClock userManager UserManager<AppUser> signInManager SignInManager<AppUser> Methods Login(LoginModel) [HttpPost(\"api/v1/Auth/Login\")] public Task<ActionResult> Login(LoginModel model) Parameters model LoginModel Returns Task<ActionResult> Logout() [Authorize] [HttpPost(\"api/v1/Auth/Logout\")] public Task<ActionResult> Logout() Returns Task<ActionResult> Register(RegisterModel) [HttpPost(\"api/v1/Auth/Register\")] [ProducesResponseType(204)] [ProducesResponseType(400)] public Task<ActionResult> Register(RegisterModel model) Parameters model RegisterModel Returns Task<ActionResult> TestMeBeforeLoginAndAfter() [Authorize] [HttpGet(\"api/v1/Auth/TestMeBeforeLoginAndAfter\")] public ActionResult TestMeBeforeLoginAndAfter() Returns ActionResult ValidateToken(TokenModel) unescape token before sending [HttpPost(\"api/v1/Auth/ValidateToken\")] public Task<ActionResult> ValidateToken(TokenModel model) Parameters model TokenModel Returns Task<ActionResult>"
  },
  "api/TwitterEdu.Api.Controllers.PostController.html": {
    "href": "api/TwitterEdu.Api.Controllers.PostController.html",
    "title": "Class PostController | TwitterEduApi",
    "keywords": "Class PostController Namespace TwitterEdu.Api.Controllers Assembly TwitterEdu.Api.dll [ApiController] public class PostController : ControllerBase Inheritance object ControllerBase PostController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostController(IClock, IApplicationMapper, AppDbContext) public PostController(IClock clock, IApplicationMapper mapper, AppDbContext dbContext) Parameters clock IClock mapper IApplicationMapper dbContext AppDbContext Methods Create(CreatePostModel) [Authorize] [HttpPost(\"api/Post\")] public Task<ActionResult<DetailPostModel>> Create(CreatePostModel model) Parameters model CreatePostModel Returns Task<ActionResult<DetailPostModel>> Delete(Guid) [HttpDelete(\"api/Post/{id:guid}\")] public Task<IActionResult> Delete(Guid id) Parameters id Guid Returns Task<IActionResult> Get(Guid) [HttpGet(\"api/Post/{id:guid}\")] public Task<ActionResult<DetailPostModel>> Get(Guid id) Parameters id Guid Returns Task<ActionResult<DetailPostModel>> GetList() [HttpGet(\"api/Post\")] public Task<ActionResult<List<DetailPostModel>>> GetList() Returns Task<ActionResult<List<DetailPostModel>>> Update(Guid, CreatePostModel) [Authorize] [HttpPut(\"api/Post/{id:guid}\")] public Task<ActionResult<DetailPostModel>> Update(Guid id, CreatePostModel model) Parameters id Guid model CreatePostModel Returns Task<ActionResult<DetailPostModel>>"
  },
  "api/TwitterEdu.Api.Controllers.WeatherForecastController.html": {
    "href": "api/TwitterEdu.Api.Controllers.WeatherForecastController.html",
    "title": "Class WeatherForecastController | TwitterEduApi",
    "keywords": "Class WeatherForecastController Namespace TwitterEdu.Api.Controllers Assembly TwitterEdu.Api.dll [ApiController] [Route(\"[controller]\")] public class WeatherForecastController : ControllerBase Inheritance object ControllerBase WeatherForecastController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WeatherForecastController(ILogger<WeatherForecastController>) public WeatherForecastController(ILogger<WeatherForecastController> logger) Parameters logger ILogger<WeatherForecastController> Methods Get() [HttpGet(Name = \"GetWeatherForecast\")] public IEnumerable<WeatherForecast> Get() Returns IEnumerable<WeatherForecast>"
  },
  "api/TwitterEdu.Api.Controllers.html": {
    "href": "api/TwitterEdu.Api.Controllers.html",
    "title": "Namespace TwitterEdu.Api.Controllers | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Api.Controllers Classes AuthController PostController WeatherForecastController"
  },
  "api/TwitterEdu.Api.Models.Auth.LoginModel.html": {
    "href": "api/TwitterEdu.Api.Models.Auth.LoginModel.html",
    "title": "Class LoginModel | TwitterEduApi",
    "keywords": "Class LoginModel Namespace TwitterEdu.Api.Models.Auth Assembly TwitterEdu.Api.dll public class LoginModel Inheritance object LoginModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [Required] [EmailAddress] public string Email { get; set; } Property Value string Password [Required] public string Password { get; set; } Property Value string"
  },
  "api/TwitterEdu.Api.Models.Auth.RegisterModel.html": {
    "href": "api/TwitterEdu.Api.Models.Auth.RegisterModel.html",
    "title": "Class RegisterModel | TwitterEduApi",
    "keywords": "Class RegisterModel Namespace TwitterEdu.Api.Models.Auth Assembly TwitterEdu.Api.dll public class RegisterModel Inheritance object RegisterModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayName [Required] public string DisplayName { get; set; } Property Value string Email [Required] [EmailAddress] public string Email { get; set; } Property Value string Password [Required] public string Password { get; set; } Property Value string"
  },
  "api/TwitterEdu.Api.Models.Auth.TokenModel.html": {
    "href": "api/TwitterEdu.Api.Models.Auth.TokenModel.html",
    "title": "Class TokenModel | TwitterEduApi",
    "keywords": "Class TokenModel Namespace TwitterEdu.Api.Models.Auth Assembly TwitterEdu.Api.dll public class TokenModel Inheritance object TokenModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [Required] [EmailAddress] public string Email { get; set; } Property Value string Token [Required] public string Token { get; set; } Property Value string"
  },
  "api/TwitterEdu.Api.Models.Auth.html": {
    "href": "api/TwitterEdu.Api.Models.Auth.html",
    "title": "Namespace TwitterEdu.Api.Models.Auth | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Api.Models.Auth Classes LoginModel RegisterModel TokenModel"
  },
  "api/TwitterEdu.Api.Models.Posts.CreatePostModel.html": {
    "href": "api/TwitterEdu.Api.Models.Posts.CreatePostModel.html",
    "title": "Class CreatePostModel | TwitterEduApi",
    "keywords": "Class CreatePostModel Namespace TwitterEdu.Api.Models.Posts Assembly TwitterEdu.Api.dll public class CreatePostModel Inheritance object CreatePostModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content [Required(AllowEmptyStrings = false, ErrorMessage = \"Příspěvek musí mít nějaký text!\")] [MaxLength(250)] public string Content { get; set; } Property Value string"
  },
  "api/TwitterEdu.Api.Models.Posts.DetailPostModel.html": {
    "href": "api/TwitterEdu.Api.Models.Posts.DetailPostModel.html",
    "title": "Class DetailPostModel | TwitterEduApi",
    "keywords": "Class DetailPostModel Namespace TwitterEdu.Api.Models.Posts Assembly TwitterEdu.Api.dll public class DetailPostModel Inheritance object DetailPostModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuthorName public string AuthorName { get; set; } Property Value string Content public string Content { get; set; } Property Value string CreatedAt public string CreatedAt { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid ModifiedAt public string ModifiedAt { get; set; } Property Value string"
  },
  "api/TwitterEdu.Api.Models.Posts.DetailPostModelExtensions.html": {
    "href": "api/TwitterEdu.Api.Models.Posts.DetailPostModelExtensions.html",
    "title": "Class DetailPostModelExtensions | TwitterEduApi",
    "keywords": "Class DetailPostModelExtensions Namespace TwitterEdu.Api.Models.Posts Assembly TwitterEdu.Api.dll public static class DetailPostModelExtensions Inheritance object DetailPostModelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDetail(IApplicationMapper, Post) public static DetailPostModel ToDetail(this IApplicationMapper mapper, Post source) Parameters mapper IApplicationMapper source Post Returns DetailPostModel"
  },
  "api/TwitterEdu.Api.Models.Posts.html": {
    "href": "api/TwitterEdu.Api.Models.Posts.html",
    "title": "Namespace TwitterEdu.Api.Models.Posts | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Api.Models.Posts Classes CreatePostModel DetailPostModel DetailPostModelExtensions"
  },
  "api/TwitterEdu.Api.Program.html": {
    "href": "api/TwitterEdu.Api.Program.html",
    "title": "Class Program | TwitterEduApi",
    "keywords": "Class Program Namespace TwitterEdu.Api Assembly TwitterEdu.Api.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/TwitterEdu.Api.Utils.ApplicationMapper.html": {
    "href": "api/TwitterEdu.Api.Utils.ApplicationMapper.html",
    "title": "Class ApplicationMapper | TwitterEduApi",
    "keywords": "Class ApplicationMapper Namespace TwitterEdu.Api.Utils Assembly TwitterEdu.Api.dll public class ApplicationMapper : IApplicationMapper Inheritance object ApplicationMapper Implements IApplicationMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DetailPostModelExtensions.ToDetail(IApplicationMapper, Post) Constructors ApplicationMapper(IClock) public ApplicationMapper(IClock Clock) Parameters Clock IClock Properties Now public Instant Now { get; } Property Value Instant"
  },
  "api/TwitterEdu.Api.Utils.ClaimsPrincipalExtensions.html": {
    "href": "api/TwitterEdu.Api.Utils.ClaimsPrincipalExtensions.html",
    "title": "Class ClaimsPrincipalExtensions | TwitterEduApi",
    "keywords": "Class ClaimsPrincipalExtensions Namespace TwitterEdu.Api.Utils Assembly TwitterEdu.Api.dll public static class ClaimsPrincipalExtensions Inheritance object ClaimsPrincipalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetName(ClaimsPrincipal) public static string GetName(this ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns string GetUserId(ClaimsPrincipal) public static Guid GetUserId(this ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns Guid"
  },
  "api/TwitterEdu.Api.Utils.IApplicationMapper.html": {
    "href": "api/TwitterEdu.Api.Utils.IApplicationMapper.html",
    "title": "Interface IApplicationMapper | TwitterEduApi",
    "keywords": "Interface IApplicationMapper Namespace TwitterEdu.Api.Utils Assembly TwitterEdu.Api.dll public interface IApplicationMapper Extension Methods DetailPostModelExtensions.ToDetail(IApplicationMapper, Post) Properties Now Instant Now { get; } Property Value Instant"
  },
  "api/TwitterEdu.Api.Utils.html": {
    "href": "api/TwitterEdu.Api.Utils.html",
    "title": "Namespace TwitterEdu.Api.Utils | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Api.Utils Classes ApplicationMapper ClaimsPrincipalExtensions Interfaces IApplicationMapper"
  },
  "api/TwitterEdu.Api.WeatherForecast.html": {
    "href": "api/TwitterEdu.Api.WeatherForecast.html",
    "title": "Class WeatherForecast | TwitterEduApi",
    "keywords": "Class WeatherForecast Namespace TwitterEdu.Api Assembly TwitterEdu.Api.dll public class WeatherForecast Inheritance object WeatherForecast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date public DateOnly Date { get; set; } Property Value DateOnly Summary public string? Summary { get; set; } Property Value string TemperatureC public int TemperatureC { get; set; } Property Value int TemperatureF public int TemperatureF { get; } Property Value int"
  },
  "api/TwitterEdu.Api.html": {
    "href": "api/TwitterEdu.Api.html",
    "title": "Namespace TwitterEdu.Api | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Api Classes Program WeatherForecast"
  },
  "api/TwitterEdu.Data.AppDbContext.html": {
    "href": "api/TwitterEdu.Data.AppDbContext.html",
    "title": "Class AppDbContext | TwitterEduApi",
    "keywords": "Class AppDbContext Namespace TwitterEdu.Data Assembly TwitterEdu.Data.dll public class AppDbContext : IdentityDbContext<AppUser, IdentityRole<Guid>, Guid>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>> IdentityDbContext<AppUser, IdentityRole<Guid>, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>> IdentityDbContext<AppUser, IdentityRole<Guid>, Guid> AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<AppUser, IdentityRole<Guid>, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.OnModelCreating(ModelBuilder) IdentityDbContext<AppUser, IdentityRole<Guid>, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.UserRoles IdentityDbContext<AppUser, IdentityRole<Guid>, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.Roles IdentityDbContext<AppUser, IdentityRole<Guid>, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.RoleClaims IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.OnModelCreating(ModelBuilder) IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.Users IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserClaims IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserLogins IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserTokens IdentityUserContext<AppUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.SchemaVersion DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppDbContext(DbContextOptions) public AppDbContext(DbContextOptions options) Parameters options DbContextOptions Properties Comments public DbSet<Comment> Comments { get; set; } Property Value DbSet<Comment> Posts public DbSet<Post> Posts { get; set; } Property Value DbSet<Post> Methods OnModelCreating(ModelBuilder) Configures the schema needed for the identity framework. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder"
  },
  "api/TwitterEdu.Data.Entities.Comment.html": {
    "href": "api/TwitterEdu.Data.Entities.Comment.html",
    "title": "Class Comment | TwitterEduApi",
    "keywords": "Class Comment Namespace TwitterEdu.Data.Entities Assembly TwitterEdu.Data.dll [Table(\"Comment\")] public class Comment : ITrackable Inheritance object Comment Implements ITrackable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ITrackableExtensions.SetCreateBySystem<T>(T, Instant) ITrackableExtensions.SetCreateBy<T>(T, string, Instant) ITrackableExtensions.SetDeleteBySystem<T>(T, Instant) ITrackableExtensions.SetDeleteBy<T>(T, string, Instant) ITrackableExtensions.SetModifyBySystem<T>(T, Instant) ITrackableExtensions.SetModifyBy<T>(T, string, Instant) Properties Author public AppUser Author { get; set; } Property Value AppUser AuthorId public Guid AuthorId { get; set; } Property Value Guid Content [MaxLength(250)] public string Content { get; set; } Property Value string CreatedAt public Instant CreatedAt { get; set; } Property Value Instant CreatedBy public string CreatedBy { get; set; } Property Value string DeletedAt public Instant? DeletedAt { get; set; } Property Value Instant? DeletedBy public string? DeletedBy { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid ModifiedAt public Instant ModifiedAt { get; set; } Property Value Instant ModifiedBy public string ModifiedBy { get; set; } Property Value string Post public Post Post { get; set; } Property Value Post PostId public Guid PostId { get; set; } Property Value Guid"
  },
  "api/TwitterEdu.Data.Entities.Identity.AppUser.html": {
    "href": "api/TwitterEdu.Data.Entities.Identity.AppUser.html",
    "title": "Class AppUser | TwitterEduApi",
    "keywords": "Class AppUser Namespace TwitterEdu.Data.Entities.Identity Assembly TwitterEdu.Data.dll public class AppUser : IdentityUser<Guid>, ITrackable Inheritance object IdentityUser<Guid> AppUser Implements ITrackable Inherited Members IdentityUser<Guid>.ToString() IdentityUser<Guid>.Id IdentityUser<Guid>.UserName IdentityUser<Guid>.NormalizedUserName IdentityUser<Guid>.Email IdentityUser<Guid>.NormalizedEmail IdentityUser<Guid>.EmailConfirmed IdentityUser<Guid>.PasswordHash IdentityUser<Guid>.SecurityStamp IdentityUser<Guid>.ConcurrencyStamp IdentityUser<Guid>.PhoneNumber IdentityUser<Guid>.PhoneNumberConfirmed IdentityUser<Guid>.TwoFactorEnabled IdentityUser<Guid>.LockoutEnd IdentityUser<Guid>.LockoutEnabled IdentityUser<Guid>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ITrackableExtensions.SetCreateBySystem<T>(T, Instant) ITrackableExtensions.SetCreateBy<T>(T, string, Instant) ITrackableExtensions.SetDeleteBySystem<T>(T, Instant) ITrackableExtensions.SetDeleteBy<T>(T, string, Instant) ITrackableExtensions.SetModifyBySystem<T>(T, Instant) ITrackableExtensions.SetModifyBy<T>(T, string, Instant) Properties CreatedAt public Instant CreatedAt { get; set; } Property Value Instant CreatedBy public string CreatedBy { get; set; } Property Value string DeletedAt public Instant? DeletedAt { get; set; } Property Value Instant? DeletedBy public string? DeletedBy { get; set; } Property Value string DisplayName public string DisplayName { get; set; } Property Value string ModifiedAt public Instant ModifiedAt { get; set; } Property Value Instant ModifiedBy public string ModifiedBy { get; set; } Property Value string Posts public ICollection<Post> Posts { get; set; } Property Value ICollection<Post>"
  },
  "api/TwitterEdu.Data.Entities.Identity.html": {
    "href": "api/TwitterEdu.Data.Entities.Identity.html",
    "title": "Namespace TwitterEdu.Data.Entities.Identity | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Data.Entities.Identity Classes AppUser"
  },
  "api/TwitterEdu.Data.Entities.Post.Metadata.html": {
    "href": "api/TwitterEdu.Data.Entities.Post.Metadata.html",
    "title": "Class Post.Metadata | TwitterEduApi",
    "keywords": "Class Post.Metadata Namespace TwitterEdu.Data.Entities Assembly TwitterEdu.Data.dll public static class Post.Metadata Inheritance object Post.Metadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ContentLength public const int ContentLength = 250 Field Value int TrackableByLength public const int TrackableByLength = 200 Field Value int"
  },
  "api/TwitterEdu.Data.Entities.Post.html": {
    "href": "api/TwitterEdu.Data.Entities.Post.html",
    "title": "Class Post | TwitterEduApi",
    "keywords": "Class Post Namespace TwitterEdu.Data.Entities Assembly TwitterEdu.Data.dll [Table(\"Post\")] public class Post : ITrackable Inheritance object Post Implements ITrackable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ITrackableExtensions.SetCreateBySystem<T>(T, Instant) ITrackableExtensions.SetCreateBy<T>(T, string, Instant) ITrackableExtensions.SetDeleteBySystem<T>(T, Instant) ITrackableExtensions.SetDeleteBy<T>(T, string, Instant) ITrackableExtensions.SetModifyBySystem<T>(T, Instant) ITrackableExtensions.SetModifyBy<T>(T, string, Instant) Properties Author public AppUser Author { get; set; } Property Value AppUser AuthorId public Guid AuthorId { get; set; } Property Value Guid Content [MaxLength(250)] public string Content { get; set; } Property Value string CreatedAt public Instant CreatedAt { get; set; } Property Value Instant CreatedBy [MaxLength(200)] public string CreatedBy { get; set; } Property Value string DeletedAt public Instant? DeletedAt { get; set; } Property Value Instant? DeletedBy [MaxLength(200)] public string? DeletedBy { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid ModifiedAt [MaxLength(200)] public Instant ModifiedAt { get; set; } Property Value Instant ModifiedBy [MaxLength(200)] public string ModifiedBy { get; set; } Property Value string"
  },
  "api/TwitterEdu.Data.Entities.html": {
    "href": "api/TwitterEdu.Data.Entities.html",
    "title": "Namespace TwitterEdu.Data.Entities | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Data.Entities Classes Comment Post Post.Metadata"
  },
  "api/TwitterEdu.Data.Interfaces.ITrackable.html": {
    "href": "api/TwitterEdu.Data.Interfaces.ITrackable.html",
    "title": "Interface ITrackable | TwitterEduApi",
    "keywords": "Interface ITrackable Namespace TwitterEdu.Data.Interfaces Assembly TwitterEdu.Data.dll public interface ITrackable Extension Methods ITrackableExtensions.SetCreateBySystem<T>(T, Instant) ITrackableExtensions.SetCreateBy<T>(T, string, Instant) ITrackableExtensions.SetDeleteBySystem<T>(T, Instant) ITrackableExtensions.SetDeleteBy<T>(T, string, Instant) ITrackableExtensions.SetModifyBySystem<T>(T, Instant) ITrackableExtensions.SetModifyBy<T>(T, string, Instant) Properties CreatedAt Instant CreatedAt { get; set; } Property Value Instant CreatedBy string CreatedBy { get; set; } Property Value string DeletedAt Instant? DeletedAt { get; set; } Property Value Instant? DeletedBy string? DeletedBy { get; set; } Property Value string ModifiedAt Instant ModifiedAt { get; set; } Property Value Instant ModifiedBy string ModifiedBy { get; set; } Property Value string"
  },
  "api/TwitterEdu.Data.Interfaces.ITrackableExtensions.html": {
    "href": "api/TwitterEdu.Data.Interfaces.ITrackableExtensions.html",
    "title": "Class ITrackableExtensions | TwitterEduApi",
    "keywords": "Class ITrackableExtensions Namespace TwitterEdu.Data.Interfaces Assembly TwitterEdu.Data.dll public static class ITrackableExtensions Inheritance object ITrackableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetCreateBySystem<T>(T, Instant) public static T SetCreateBySystem<T>(this T trackable, Instant now) where T : class, ITrackable Parameters trackable T now Instant Returns T Type Parameters T SetCreateBy<T>(T, string, Instant) public static T SetCreateBy<T>(this T trackable, string author, Instant now) where T : class, ITrackable Parameters trackable T author string now Instant Returns T Type Parameters T SetDeleteBySystem<T>(T, Instant) public static T SetDeleteBySystem<T>(this T trackable, Instant now) where T : class, ITrackable Parameters trackable T now Instant Returns T Type Parameters T SetDeleteBy<T>(T, string, Instant) public static T SetDeleteBy<T>(this T trackable, string author, Instant now) where T : class, ITrackable Parameters trackable T author string now Instant Returns T Type Parameters T SetModifyBySystem<T>(T, Instant) public static T SetModifyBySystem<T>(this T trackable, Instant now) where T : class, ITrackable Parameters trackable T now Instant Returns T Type Parameters T SetModifyBy<T>(T, string, Instant) public static T SetModifyBy<T>(this T trackable, string author, Instant now) where T : class, ITrackable Parameters trackable T author string now Instant Returns T Type Parameters T"
  },
  "api/TwitterEdu.Data.Interfaces.html": {
    "href": "api/TwitterEdu.Data.Interfaces.html",
    "title": "Namespace TwitterEdu.Data.Interfaces | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Data.Interfaces Classes ITrackableExtensions Interfaces ITrackable"
  },
  "api/TwitterEdu.Data.Migrations.CommentsAdded.html": {
    "href": "api/TwitterEdu.Data.Migrations.CommentsAdded.html",
    "title": "Class CommentsAdded | TwitterEduApi",
    "keywords": "Class CommentsAdded Namespace TwitterEdu.Data.Migrations Assembly TwitterEdu.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20241217152804_CommentsAdded\")] public class CommentsAdded : Migration Inheritance object Migration CommentsAdded Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/TwitterEdu.Data.Migrations.ITrackableAdded.html": {
    "href": "api/TwitterEdu.Data.Migrations.ITrackableAdded.html",
    "title": "Class ITrackableAdded | TwitterEduApi",
    "keywords": "Class ITrackableAdded Namespace TwitterEdu.Data.Migrations Assembly TwitterEdu.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20241112155015_ITrackableAdded\")] public class ITrackableAdded : Migration Inheritance object Migration ITrackableAdded Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/TwitterEdu.Data.Migrations.IdentityInit.html": {
    "href": "api/TwitterEdu.Data.Migrations.IdentityInit.html",
    "title": "Class IdentityInit | TwitterEduApi",
    "keywords": "Class IdentityInit Namespace TwitterEdu.Data.Migrations Assembly TwitterEdu.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20241112153812_IdentityInit\")] public class IdentityInit : Migration Inheritance object Migration IdentityInit Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/TwitterEdu.Data.Migrations.Init.html": {
    "href": "api/TwitterEdu.Data.Migrations.Init.html",
    "title": "Class Init | TwitterEduApi",
    "keywords": "Class Init Namespace TwitterEdu.Data.Migrations Assembly TwitterEdu.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20240924144437_Init\")] public class Init : Migration Inheritance object Migration Init Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/TwitterEdu.Data.Migrations.ModifiedAdded.html": {
    "href": "api/TwitterEdu.Data.Migrations.ModifiedAdded.html",
    "title": "Class ModifiedAdded | TwitterEduApi",
    "keywords": "Class ModifiedAdded Namespace TwitterEdu.Data.Migrations Assembly TwitterEdu.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20241008140556_ModifiedAdded\")] public class ModifiedAdded : Migration Inheritance object Migration ModifiedAdded Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/TwitterEdu.Data.Migrations.UserToPostAdded.html": {
    "href": "api/TwitterEdu.Data.Migrations.UserToPostAdded.html",
    "title": "Class UserToPostAdded | TwitterEduApi",
    "keywords": "Class UserToPostAdded Namespace TwitterEdu.Data.Migrations Assembly TwitterEdu.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20241203151141_UserToPostAdded\")] public class UserToPostAdded : Migration Inheritance object Migration UserToPostAdded Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/TwitterEdu.Data.Migrations.html": {
    "href": "api/TwitterEdu.Data.Migrations.html",
    "title": "Namespace TwitterEdu.Data.Migrations | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Data.Migrations Classes CommentsAdded A base class inherited by each EF Core migration. ITrackableAdded A base class inherited by each EF Core migration. IdentityInit A base class inherited by each EF Core migration. Init A base class inherited by each EF Core migration. ModifiedAdded A base class inherited by each EF Core migration. UserToPostAdded A base class inherited by each EF Core migration."
  },
  "api/TwitterEdu.Data.html": {
    "href": "api/TwitterEdu.Data.html",
    "title": "Namespace TwitterEdu.Data | TwitterEduApi",
    "keywords": "Namespace TwitterEdu.Data Classes AppDbContext"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | TwitterEduApi",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | TwitterEduApi",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | TwitterEduApi",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}